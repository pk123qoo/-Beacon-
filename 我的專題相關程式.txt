#define ENA 6
#define In1 7  
#define In2 8
#define In3 11  //左馬達 
#define In4 12
#define ENB 13

#define trigPin 5 // 超音波Pin
#define echoPin 4
#define f_range 0.5

#include <SoftwareSerial.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

typedef struct xypoint
{
  double x;
  double y;
}XYpoint;

SoftwareSerial myBT(10,9);//前面接TX後面接RX的
const double dangerThresh = 0;   // 10cm × 58
const double x_target=1.5,y_target=1.5 ;
char chrRecv;
unsigned long d ;            // 前方障礙物距離
String replyforALL;
double d1,d2,d3;    //距離
double rss1=1,rss2=1,rss3=1,checkrssi;
long distance; // 暫存接收訊號的高電位持續時間
XYpoint p_o1,p_o2;
double xf,yf;
int select=0;
double dis;
double GoTime;


String sendCommand(const char * command)
{ //自動輸入指令
  String reply;
  Serial.println(command);
  myBT.println(command);
  //wait some time   
  
  while (myBT.available()) 
  {
    reply = myBT.readString();
  }

  //Serial.println(reply);
  return reply;
}

double ToDistance()
{
  return sqrt(pow(xf,2)+pow(yf,2));
}

int ToTime()
{
  return dis*1.7*1000;
}

void getValue(String inOri)
{  //抓三個RSSI值
  double a = 67;  //一公尺ㄉRSSI 需要輸入 62
  double n = 4;   //環境因子    
  char inR[500],out[3][20];
  char test[3][6];
    
  inOri.toCharArray(inR,500);
     
  strncpy(out[0],strstr(inR,"41A84BC8C7")+24,4); //41A84BC8C7 ipadmini
  delay(5);
  
  strncpy(out[1],strstr(inR,"41154BC8C7")+24,4); //41154BC8C7 iphone  XZS 41154BC8BF
  delay(5);
  strncpy(out[2],strstr(inR,"411D4BC8C8")+24,4); //411D4BC8C8 ipad
  //delay(5);
  checkrssi=-((out[0][1]-'0')*100+(out[0][2]-'0')*10+(out[0][3]-'0'));
  Serial.println(checkrssi);
  delay(5);
  if(  checkrssi> -200 && checkrssi<-40)
  {
    rss1 = checkrssi;      
  }
  
  checkrssi=-((out[1][1]-'0')*100+(out[1][2]-'0')*10+(out[1][3]-'0'));
  Serial.println(checkrssi);
  //delay(5);
  if(checkrssi> -200 && checkrssi<-40)
  {
    rss2 = checkrssi;       
  }
  
  checkrssi=-((out[2][1]-'0')*100+(out[2][2]-'0')*10+(out[2][3]-'0'));
  Serial.println(checkrssi);
  //delay(5);
  if(checkrssi> -200 && checkrssi<-40)
  {
    rss3 = checkrssi;       
  }
  
  Serial.println(rss1);
  d1 = (pow(10.00,((abs(rss1)-a)/(10.00*n))));
  //Serial.println(d1);
  //delay(5);
  Serial.println(rss2);
  d2 = (pow(10,((abs(rss2)-a)/(10*n))));
  //Serial.println(d2);
  //delay(5);
  Serial.println(rss3);
  d3 = (pow(10,((abs(rss3)-a)/(10*n))));
  // Serial.println(d3);
  //delay(5);
} 
      
XYpoint GetMobilePoint()
{
  XYpoint rxy;
  XYpoint XY_p[3];
  XY_p[0].x=0.0;
  XY_p[0].y=0.0;
  XY_p[1].x=0.0;
  XY_p[1].y=2.0;
  XY_p[2].x=2.0;
  XY_p[2].y=0.0;
  
  double A = XY_p[0].x -XY_p[2].x;
  double B = XY_p[0].y - XY_p[2].y;
  double C = pow(XY_p[0].x, 2) - pow(XY_p[2].x, 2) + pow(XY_p[0].y=0, 2) - pow(XY_p[2].y=0, 2) + pow(d3, 2) - pow(d1, 2);
  delay(5);
  
  double D = XY_p[1].x -XY_p[2].x;
  double E = XY_p[1].y - XY_p[2].y;
  double F = pow(XY_p[1].x, 2) - pow(XY_p[2].x, 2) + pow(XY_p[1].y, 2) - pow(XY_p[2].y=0, 2) + pow(d3, 2) - pow(d2, 2);
  delay(5);
      
  rxy.x = (B * F - E * C) / (2 * B * D - 2 * A * E);
  delay(5);
  rxy.y = (A * F - D * C) / (2 * A * E - 2 * B * D);
  delay(5);
      
      
  return rxy;
}

     
// 超音波距離偵測,傳回 cm
long ping_d() 
{
  digitalWrite(trigPin,HIGH) ;
  //delayMicroseconds(5);
  digitalWrite(trigPin,LOW);
  return (pulseIn(echoPin,HIGH)/58) ;
}

void turnAngle()
{
  double lengthAB = sqrt( pow(p_o2.x - p_o1.x, 2) +  pow(p_o2.y - p_o1.y, 2));
  double lengthAC = sqrt( pow(p_o2.x - x_target, 2) +  pow(p_o2.y - y_target, 2));
  double lengthBC = sqrt( pow(p_o1.x - x_target, 2) +  pow(p_o1.y - y_target, 2));

  double cosA = (pow(lengthAB, 2) + pow(lengthAC, 2) - pow(lengthBC, 2)) /  (2 * lengthAB * lengthAC);
  double angleA =  acos(cosA) * 180 / PI ;
  int timeA;
  
/*
  double dx1, dx2, dy1, dy2,c;
  double angle;
  int timeA;
 
  dx1 = p_o1.x - p_o2.x;
  dy1 = p_o1.y - p_o2.y;
  dx2 = x_target - p_o2.x;
  dy2 = y_target - p_o2.y;
  c = (double)sqrt(dx1 * dx1 + dy1 * dy1) * (double)sqrt(dx2 * dx2 + dy2 * dy2);
  //if (c == 0) return -1;
 
  angle = (double)acos((dx1 * dx2 + dy1 * dy2) / c);*/

 Serial.println("OKOK1");
Serial.println(angleA);


if(p_o2.y > y_target)
{
  Serial.println("R");
  turnRight();
}else if(p_o2.y == y_target)
{
  Serial.println("U");
}else
{
  Serial.println("L");
  turnLeft();
}
   
   timeA = (int)(fabs(angleA))/360 *3*1000;
   delay(timeA);
   Serial.println("OKOK");
   Serial.println(timeA);
}

void forward() 
{ 
  // 前進函數 
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, HIGH);
  digitalWrite(In4, LOW);
  analogWrite(ENA, 255);
  analogWrite(ENB,128);
}

void backward()
{
  digitalWrite(In1, LOW);
  digitalWrite(In2, HIGH);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(ENA, 245);
  analogWrite(ENB, 128);
}

void turnLeft()
{                  
  // 左轉彎函數  turnLeft ok
  //右馬達 前進 1
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, LOW);
  analogWrite(ENA, 255);
  analogWrite(ENB, 0);
}

void turnRight()
{                  
  // 右轉彎函數  turnRight ok
  // 右馬達 前進
  digitalWrite(In1, LOW);
  digitalWrite(In2, LOW);
  digitalWrite(In3, HIGH );
  digitalWrite(In4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 128);
}

void motoStop()
{                 
  //停止函數 
  // 右馬達 前進
  digitalWrite(In1, LOW);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB,0);
}

void avoidTrash()
{
  while(distance<dangerThresh )
  {
    Serial.println("C");
    
    distance = ping_d();      // 讀取障礙物的距離
    Serial.println(distance);

    backward();
    delay(800);
    turnRight();
    delay(100);
    distance = ping_d();
    if(distance<dangerThresh)
    {
      turnLeft();
      delay(200);
    }
  }
  
}

void GoToWhere1()
{
  rss1=rss2=rss3=1;
  do
  {
    replyforALL = sendCommand("AT+DISI?");
    Serial.println(replyforALL);
    getValue(replyforALL); 
  }while(rss1== 1 || rss2== 1 || rss3 == 1);      
     
  p_o1 = GetMobilePoint();
  distance = ping_d();

  Serial.print("p_o1.x:");
  Serial.println(p_o1.x);
  Serial.print("p_o1.y:");
  Serial.println(p_o1.y);

  xf=p_o1.x - x_target;
  yf=p_o1.y - y_target;
  Serial.println(xf);
  Serial.println(yf);

  dis = ToDistance();
  
}


void GoToWhere2()
{
  rss1=rss2=rss3=1;
  do
  {
    replyforALL = sendCommand("AT+DISI?");
    Serial.println(replyforALL);
    getValue(replyforALL); 
  }while(rss1== 1 || rss2== 1 || rss3 == 1);      
     
  p_o2 = GetMobilePoint();
  distance = ping_d();

  Serial.print("p_o2.x:");
  Serial.println(p_o2.x);
  Serial.print("p_o2.y:");
  Serial.println(p_o2.y);

  xf=p_o2.x - x_target;
  yf=p_o2.y - y_target;
  Serial.println(xf);
  Serial.println(yf);

  dis = ToDistance();
  
}
  
void setup() {
  XYpoint p_f;
  Serial.begin(9600);
  myBT.begin(9600);
  sendCommand("AT+RESET");
  sendCommand("AT+IBEA1");
  sendCommand("AT+IMME1");
  sendCommand("AT+ROLE1");
  
  //馬達腳位設定   
  pinMode(In1,OUTPUT); //右馬達
  pinMode(In2,OUTPUT);
  pinMode(In3,OUTPUT); //左馬達
  pinMode(In4,OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // 超音波腳位設定
  //pinMode(trigPin,OUTPUT) ;
  //pinMode(echoPin,INPUT) ;
    
}
  
  
void loop() 
{
  Serial.print("select:");
  Serial.println(select); 
  if(select!=3)
  {
    distance = ping_d();
    if(distance<dangerThresh)
    {
      select = 2;
    }
    else select=0;
    
  }

  Serial.print("DIS:");  
  Serial.println(distance);   
  switch(select)
  {
    case 0:
    GoToWhere1();   
    forward();
    delay(500);
    motoStop();
    GoToWhere2();  
    case 1:
    turnAngle();
    Serial.println("OK"); 
    dis = ToDistance();
    forward();
    delay(ToTime());
    Serial.print("ToTime:");
    Serial.println(ToTime());
    select = 3;
    break;
    
    case 2:
    avoidTrash();
    select = 0;
    break;

    case 3:
    motoStop();
    break;
  }




 

}